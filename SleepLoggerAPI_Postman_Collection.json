{
	"info": {
		"_postman_id": "30e9cb8d-9ad9-4461-af3a-ac1721a4693c",
		"name": "SleepLog API",
		"description": "This collection contains all the endpoints related to user management and sleep log operations for the SleepLog API. It includes endpoints for creating users, retrieving user details, and managing sleep logs (creating, updating, and retrieving sleep logs).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40622967"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('timestamp', 'status', 'error', 'path');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Path is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Path should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Harsh Patel\",\n  \"email\": \"hp240920@example.com\",\n  \"username\": \"hp240920\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				},
				"description": "This endpoint is used to create a new user by providing the user's name, email, and username."
			},
			"response": []
		},
		{
			"name": "Get User by Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, name, email, and username\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('email');",
							"  pm.expect(responseData).to.have.property('username');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.be.a('string');",
							"    pm.expect(responseData.email).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/users/hp240920",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users",
						"hp240920"
					]
				},
				"description": "This endpoint retrieves a user by their username."
			},
			"response": []
		},
		{
			"name": "Get User by Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.to.have.status(200));",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response has the required fields - id, name, email, and username\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.email).to.exist;",
							"    pm.expect(responseData.username).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Id field should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"pm.test(\"Name field should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"pm.test(\"Email field should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
							"});",
							"",
							"pm.test(\"Username field should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/users/email?email=hp240920@example.com",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users",
						"email"
					],
					"query": [
						{
							"key": "email",
							"value": "hp240920@example.com"
						}
					]
				},
				"description": "This endpoint retrieves a user by their email address."
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, name, email, and username\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.id).to.exist;",
							"        pm.expect(user.name).to.exist;",
							"        pm.expect(user.email).to.exist;",
							"        pm.expect(user.username).to.exist;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.email).to.match(/^.+@.+\\..+$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id, name, email, and username are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(user => {",
							"        pm.expect(user.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"        pm.expect(user.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"        pm.expect(user.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
							"        pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				},
				"description": "This endpoint retrieves all users from the system."
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, name, email, and username\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('email');",
							"  pm.expect(responseData).to.have.property('username');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid email format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Harsh P\",\n  \"email\": \"hp240920@example.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/users/hp240920",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"users",
						"hp240920"
					]
				},
				"description": "This endpoint updates the user's name and/or email."
			},
			"response": []
		},
		{
			"name": "Create Sleep Log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timestamp).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.error).to.exist;",
							"    pm.expect(responseData.path).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"});",
							"",
							"",
							"pm.test(\"Path is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Path should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is descriptive and user-friendly\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"hp240920\",\n  \"date\": \"2024-12-23\",\n  \"timeInBedStart\": \"2024-12-22T22:00:00\",\n  \"timeInBedEnd\": \"2024-12-23T06:00:00\",\n  \"totalTimeInBed\": 480,\n  \"feeling\": \"OK\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/sleep-logs",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sleep-logs"
					]
				},
				"description": "This endpoint creates a new sleep log for a user, including details about the time in bed, total time in bed, and the user's feeling."
			},
			"response": []
		},
		{
			"name": "Get Sleep Logs by Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(log => {",
							"    pm.expect(log).to.have.property('id');",
							"    pm.expect(log).to.have.property('username');",
							"    pm.expect(log).to.have.property('date');",
							"    pm.expect(log).to.have.property('timeInBedStart');",
							"    pm.expect(log).to.have.property('timeInBedEnd');",
							"    pm.expect(log).to.have.property('totalTimeInBed');",
							"    pm.expect(log).to.have.property('feeling');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Date is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(log) {",
							"    pm.expect(log.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Time in bed start and end are in a valid time format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(log) {",
							"        pm.expect(log.timeInBedStart).to.match(/^\\d{2}:\\d{2}$/);",
							"        pm.expect(log.timeInBedEnd).to.match(/^\\d{2}:\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response contains an array of sleep logs for the specific user\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(log) {",
							"        pm.expect(log).to.have.property('username', 'hp240920');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/sleep-logs/user/hp240920",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sleep-logs",
						"user",
						"hp240920"
					]
				},
				"description": "This endpoint retrieves all sleep logs for a specific user based on their username."
			},
			"response": []
		},
		{
			"name": "Update Feeling by Username and Date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.username).to.exist;",
							"    pm.expect(responseData.date).to.exist;",
							"    pm.expect(responseData.timeInBedStart).to.exist;",
							"    pm.expect(responseData.timeInBedEnd).to.exist;",
							"    pm.expect(responseData.totalTimeInBed).to.exist;",
							"    pm.expect(responseData.feeling).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"TimeInBedStart and timeInBedEnd are in valid time format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    if (responseData.timeInBedStart && responseData.timeInBedEnd) {",
							"        pm.expect(responseData.timeInBedStart).to.match(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, \"TimeInBedStart must be in valid time format (HH:MM)\");",
							"        pm.expect(responseData.timeInBedEnd).to.match(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, \"TimeInBedEnd must be in valid time format (HH:MM)\");",
							"    }",
							"});",
							"",
							"",
							"pm.test(\"TotalTimeInBed is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.totalTimeInBed).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Feeling is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.feeling).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Feeling should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"hp240920\",\n  \"date\": \"2024-12-23\",\n  \"feeling\": \"GOOD\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/sleep-logs/sleep-log/update-feeling",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sleep-logs",
						"sleep-log",
						"update-feeling"
					]
				},
				"description": "This endpoint updates the feeling of a user for a specific sleep log based on the username and date."
			},
			"response": []
		},
		{
			"name": "Get Last Night's Sleep",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.username).to.exist;",
							"    pm.expect(responseData.date).to.exist;",
							"    pm.expect(responseData.timeInBedStart).to.exist;",
							"    pm.expect(responseData.timeInBedEnd).to.exist;",
							"    pm.expect(responseData.totalTimeInBed).to.exist;",
							"    pm.expect(responseData.feeling).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Date is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Time in bed start should be before time in bed end\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.timeInBedStart).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.timeInBedEnd).to.exist.and.to.be.a('string');",
							"    ",
							"    const timeStart = new Date(responseData.timeInBedStart);",
							"    const timeEnd = new Date(responseData.timeInBedEnd);",
							"    ",
							"    pm.expect(timeStart.getTime()).to.be.lessThan(timeEnd.getTime());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/sleep-logs/sleep-log/last-night/hp240920",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sleep-logs",
						"sleep-log",
						"last-night",
						"hp240920"
					]
				},
				"description": "This endpoint retrieves the user's sleep log for the previous night based on the username."
			},
			"response": []
		},
		{
			"name": "Get Last 30-Day Averages",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.startDate).to.exist;",
							"    pm.expect(responseData.endDate).to.exist;",
							"    pm.expect(responseData.averageTotalTimeInBed).to.exist;",
							"    pm.expect(responseData.averageTimeInBedStart).to.exist;",
							"    pm.expect(responseData.averageTimeInBedEnd).to.exist;",
							"    pm.expect(responseData.feelingFrequencies).to.exist;",
							"    pm.expect(responseData.daysIncluded).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Feeling frequencies include 'GOOD'\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.feelingFrequencies).to.exist;",
							"    pm.expect(responseData.feelingFrequencies.GOOD).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Average total time in bed is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.averageTotalTimeInBed).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Average total time in bed should be non-negative\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/sleep-logs/sleep-log/averages/hp240920",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sleep-logs",
						"sleep-log",
						"averages",
						"hp240920"
					]
				},
				"description": "This endpoint retrieves the average sleep data for the last 30 days for a given user, including average hours slept and the most common feeling."
			},
			"response": []
		},
		{
			"name": "Get Sleep Log by Username and Date",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/sleep-logs/view?username=hp240920&date=2024-12-23",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sleep-logs",
						"view"
					],
					"query": [
						{
							"key": "username",
							"value": "hp240920"
						},
						{
							"key": "date",
							"value": "2024-12-23"
						}
					]
				},
				"description": "This API endpoint allows you to retrieve a user's sleep log for a specific date. The request requires the `username` and `date` parameters to fetch the corresponding sleep log. If the sleep log exists for the provided username and date, it returns the details such as time in bed start, time in bed end, total time in bed, and how the user felt in the morning. If no sleep log is found, it returns an error message indicating that no log was found for the specified date."
			},
			"response": []
		}
	]
}